---
title: "AMR Mortality and SES analysis, v2"
author: "Henderson, Heather"
date: "`r format(Sys.time(), '%B %d, %Y')`"
format: html
self-contained: true
toc: true
toc-depth: 4
code-fold: true
editor: visual
---

```{r}
#| include: false
knitr::opts_chunk$set(warning = FALSE)
```

```{r}
#| label: load-packages
#| echo: false
#| output: false
packages <- function(x) {
  for (i in x) {
    if (!require(i, character.only = TRUE)) {
      install.packages(i, dependencies = TRUE)
      library(i, character.only = TRUE)
    }
  }
}
packages(c("haven", "readxl", "readr", "tidyverse" , "data.table" , "naniar", "rockchalk", "lubridate", "kableExtra", "DT", "formatR", "zoo", "janitor", "tableone", "broom", "furniture", "arsenal", "RColorBrewer", "survminer", "survival", "condSURV", "gtsummary", "ggsurvfit", "ggstance", "Hmisc", "rms", "sandwich", "lmtest", "ipw"))
```

# Data

```{r}
#| echo: false
setwd("C:/Users/henderh/OneDrive - University of North Carolina at Chapel Hill/Projects/AMR/AMR_mapping_project/AMR mortality analysis/mortality_rproj/")

data_all <- readRDS("Z:/Van Duin_David_IRB23-2326/amr_mapping_rproj/data files/all_species_full_data.rds")
adi_nc_zip <- read_excel("adi_nc_zip.xlsx")
distance <- read_rds("distance_1218.rds")
unc_locations <- read_excel("unc_locations.xlsx")
other_locations <- read_excel("other_locations.xlsx")

locations <- unc_locations |>
  bind_rows(other_locations) |>
  select(-address)
# Process ADI ZIP code data
# adi_nc_zip1 <- adi_nc_zip |>
#   clean_names() |>
#   mutate(zip_code = str_sub(zip_4, 1, 5)) |>
#   select(zip_code, adi_staterank) |>
#   mutate(adi_staterank = as.numeric(adi_staterank)) |>
#   filter(!is.na(adi_staterank)) |>
#   group_by(zip_code) |>
#   mutate(adi = median(adi_staterank),
#          adi_tertile = case_when(adi %in% 1:3 ~ 1,
#                                  adi %in% 4:7 ~ 2,
#                                  adi %in% 8:10 ~ 3)) |>
#   select(-adi_staterank) |>
#   distinct()
```

**Add follow-up time and status for death within 30 days of isolate**

```{r}
df <- data_all |>
  filter(dataset == "enterobacterales") |>
  # Set start of follow-up
  dplyr::rename(t0 = result_date) |> 
  mutate(t = as.numeric(death_date - t0),
         status = ifelse(!is.na(death_date) & t <= 30, 1, 0),
         statusf = factor(status, 
                          labels = c("Survived", "Died")),
         # Set end of follow-up censoring date
         tf = pmin(death_date, t0 + 30, as.Date("2023-10-31"), na.rm = TRUE),
         ftime = as.numeric(tf - t0),
         ftime = ifelse(ftime < 0, 0, ftime),
         ftime = ifelse(ftime > 30, 30, ftime),
         racef = factor(race_recode, 
                        levels = c("white", "black", "other/unknown")),
         ethnicityf = factor(ethnicity_recode, 
                             levels = c("nonhispanic", "hispanic", "unknown")),
         isolate_sourcef = factor(isolate_source, 
                                  levels = c("urine", "blood", "resp", "other"))) |>
  select(pat_deid, isolate_id, age, gender, racef, ethnicityf, zip_code, parent_hospital, department_name, isolate_sourcef, organism_name, antibiotic_class, resistant_to_class, mdr, status, statusf, t0, tf, ftime, culture_year) |> 
  distinct() |>
  left_join(adi_nc_zip |> mutate(zip_code = as.character(zip_code),
                                 adi_tertile = factor(adi_tertile, labels = c("Low", "Middle", "High"))), 
            relationship = "many-to-many")

df |>
  select(pat_deid, statusf) |>
  distinct() |>
  tabyl(statusf)
```

**Numbers of patients and isolates, full dataset**

```{r}
n_distinct(df$pat_deid)
n_distinct(df$isolate_id)
```

**Restrict to blood and respiratory isolates, antibiotic classes of interest, NC zip codes**
To add isolate source = 'other' will have to add new locations and ZIPs to locations and distance files

```{r}
df1 <- df |>
  filter(antibiotic_class %in% c("aminoglycoside", "carbapenem", "cephalosporin_3rd_gen", "cephalosporin_4th_gen", "penicillins_bli", "quinolone"),
         gender %in% c("male", "female"),
         isolate_sourcef %in% c("blood", "resp"))  |>
  mutate(isolate_sourcef = factor(isolate_sourcef, levels = c("blood", "resp")))|>
  mutate(antibiotic_class = ifelse(str_detect(antibiotic_class, "3|4"), "cephalosporin", antibiotic_class)) |>
  filter(as.numeric(zip_code) %in% 27006:28909)
# For calculating distances
# dept_zip <- df1 |>
#   select(zip_code, parent_hospital, department_name) |>
#   distinct()
# write_rds(dept_zip, "dept_zip.rds")
```

**Add location type and distance, isolate counter**

```{r}
df2 <- df1 |> 
  left_join(locations) |>
  left_join(distance |> select(zip_code, department_name, distance_km), relationship = "many-to-many") |>
  filter(location_type %in% c("emergency", "icu", "inpatient", "outpatient"))

isolate_counter <- df2 |>
  select(pat_deid, isolate_id, organism_name, statusf, t0, tf) |>
  distinct() |>
  group_by(pat_deid) |>
  mutate(isolate_number = row_number()) |>
  ungroup()

df2 <- df2 |>
  left_join(isolate_counter) |>
  mutate(age_grp = case_when(age <= 40 ~ 1,
                             age > 40 & age <= 60 ~ 2,
                             age > 60 & age <= 75 ~ 3,
                             TRUE ~ 4),
         age_grp = factor(age_grp, 
                          labels = c("18-40", "41-60", "61-75", ">75")))
```

**Numbers of patients and isolates, analysis dataset**

```{r}
n_distinct(df2$pat_deid)
n_distinct(df2$isolate_id)
```

# Descriptive statistics

```{r}
# Reduced dataset for descriptive statistics
# 1 obs per patient
df_tb1_1st <- df2 |>
  filter(isolate_number == 1) |>
  select(pat_deid, age, gender, racef, ethnicityf, adi_tertile, distance_km, parent_hospital, location_type, isolate_sourcef, statusf, mdr) |>
  distinct() |>
  add_count(parent_hospital) |>
  select(-n) |>
  group_by(pat_deid) |>
  slice(1) |>
  ungroup()
# 1 obs per isolate
df_tb1_all <- df2 |>
  select(pat_deid, isolate_id, age, gender, racef, ethnicityf, adi_tertile, distance_km, parent_hospital, location_type, isolate_sourcef, statusf, mdr) |>
  distinct() |>
  add_count(parent_hospital) |>
  select(-n) |>
  group_by(isolate_id) |>
  slice(1) |>
  ungroup()
```

## Patients

```{r}
vars <- c("age", "gender", "racef", "ethnicityf", "distance_km", "statusf")
factorVars <- c("gender", "racef", "ethnicityf", "statusf")
tableOne <- CreateTableOne(vars = vars, data = df_tb1_1st, strata = "adi_tertile", factorVars = factorVars)
tbl <- (print(tableOne, nonnormal = TRUE, quote = FALSE, noSpaces = TRUE, printToggle = FALSE, showAllLevels = TRUE, test = FALSE))
tbl |> 
  kable("html") |>
  kable_styling()
```

## Isolates

```{r}
vars <- c("location_type", "isolate_sourcef")
factorVars <- c("location_type", "isolate_sourcef")
tableOne <- CreateTableOne(vars = vars, data = df_tb1_all, strata = "adi_tertile", factorVars = factorVars)
tbl <- (print(tableOne, nonnormal = TRUE, quote = FALSE, noSpaces = TRUE, printToggle = FALSE, showAllLevels = TRUE, test = FALSE))
tbl |> 
  kable("html") |>
  kable_styling()
```

**Distance from provider by location type**

```{r}
df2 |>
  select(isolate_id, mdr, distance_km, location_type) |>
  distinct() |>
  group_by(mdr, location_type) |>
  summarise(median(distance_km)) |> 
  kable("html") |>
  kable_styling()
# 6% outpatient, wide range of locations: labs, periop, transplant, hem-onc, urg care, ENT, fam med, pulmonary specialist
```

# Functions
**Calculate stabilized IPTW**

```{r}
calculate_iptw <- function(data, formula, outcome_var, trim_quantiles = c(0.01, 0.99)) {
  # Fit multinomial logistic regression model
  ps_mod <- nnet::multinom(formula = as.formula(formula), data = data)
  print(broom::tidy(ps_mod), n = Inf)
  # Predicted probabilities for each level of the outcome variable
  pred_probs <- predict(ps_mod, type = "probs")
  # Ensure pred_probs is a dataframe with proper column names
  pred_probs <- as.data.frame(pred_probs)
  colnames(pred_probs) <- levels(data[[outcome_var]])
  # Marginal probabilities for each level of the outcome
  marginal_probs <- prop.table(table(data[[outcome_var]]))
  # Calculate IPT weights
  data <- data |>
    mutate(
      ps = pred_probs[cbind(1:nrow(pred_probs), match(data[[outcome_var]], colnames(pred_probs)))],
      iptw = as.numeric(marginal_probs[data[[outcome_var]]] / ps),
      iptw = ifelse(iptw > quantile(iptw, trim_quantiles[2]), quantile(iptw, trim_quantiles[2]), iptw),
      iptw = ifelse(iptw < quantile(iptw, trim_quantiles[1]), quantile(iptw, trim_quantiles[1]), iptw)
    )
  # Return modified dataset with stabilized IPTW
  return(data)
}

formula1 <- "adi_tertile ~ age_grp + rcs(culture_year, 5) + rcs(distance_km, 5) + gender + racef + ethnicityf + isolate_sourcef + location_type"
outcome_var1 <- "adi_tertile"
```

**Generate survival data for cumulative incidence curves**

```{r}
generate_survival_data <- function(data, time_var, status_var, adi_var, group_var, weights_var, cluster_var) {
  # Filter data subsets
  data_susceptible <- data |> filter(!.data[[group_var]])
  data_nonsusceptible <- data |> filter(.data[[group_var]])
  # Fit Cox models
  cox_susceptible <- coxph(
    formula = as.formula(paste0("Surv(", time_var, ", ", status_var, ") ~ ", adi_var)),
    weights = data_susceptible[[weights_var]],
    cluster = data_susceptible[[cluster_var]],
    data = data_susceptible
  )
  cox_nonsusceptible <- coxph(
    formula = as.formula(paste0("Surv(", time_var, ", ", status_var, ") ~ ", adi_var)),
    weights = data_nonsusceptible[[weights_var]],
    cluster = data_nonsusceptible[[cluster_var]],
    data = data_nonsusceptible
  )
  # Create new data frame for predictions
  newdata_adi <- data.frame(
    adi_tertile = factor(c("Low", "Middle", "High"), levels = levels(data[[adi_var]]))
  )
  # Extract cumulative incidence data for each group
  surv_fit_susceptible <- survfit(cox_susceptible, newdata = newdata_adi)
  surv_fit_nonsusceptible <- survfit(cox_nonsusceptible, newdata = newdata_adi)
  # Convert survival objects to data frames
  df_susceptible_surv <- data.frame(
    time = rep(surv_fit_susceptible$time, times = length(levels(data[[adi_var]]))),
    surv = as.vector(1 - surv_fit_susceptible$surv), # Convert to cumulative incidence
    strata = factor(rep(levels(data[[adi_var]]), each = length(surv_fit_susceptible$time)), 
                    levels = levels(data[[adi_var]])),
    isolate_type = "Susceptible"
  )
    df_nonsusceptible_surv <- data.frame(
    time = rep(surv_fit_nonsusceptible$time, times = length(levels(data[[adi_var]]))),
    surv = as.vector(1 - surv_fit_nonsusceptible$surv), # Convert to cumulative incidence
    strata = factor(rep(levels(data[[adi_var]]), each = length(surv_fit_nonsusceptible$time)), 
                    levels = levels(data[[adi_var]])),
    isolate_type = "Nonsusceptible"
  )
  # Combine and finalize survival data
  df_surv <- df_susceptible_surv |>
    rbind(df_nonsusceptible_surv) |>
    filter(strata != "Middle") |>
    mutate(
      group = paste(strata, isolate_type, sep = ", "),
      group = factor(
        group,
        levels = c("Low, Susceptible", "High, Susceptible", "Low, Nonsusceptible", "High, Nonsusceptible"),
        labels = c("Low ADI, susceptible", "High ADI, susceptible", 
                   "Low ADI, non-susceptible", "High ADI, non-susceptible")
      )
    )
  return(df_surv)
}
```

**Chart formats**

```{r}
plt_theme <- theme_minimal() +
  theme(
    legend.position = "top",
    legend.title = element_blank(),
    legend.text = element_text(size = 12),
    axis.text.x = element_text(size = 12),
    axis.text.y = element_text(size = 12),
    axis.title.x = element_text(size = 12),
    axis.title.y = element_text(size = 12),
    legend.direction = "horizontal",
    legend.box = "horizontal",
    legend.key.height = unit(0.2, "cm"), # Adjust vertical spacing
    legend.key.width = unit(0.5, "cm")   # Adjust horizontal spacing
  )
plt_guides <- guides(
  color = guide_legend(nrow = 2, byrow = TRUE),
  linetype = guide_legend(nrow = 2, byrow = TRUE)
)
plt_color <- scale_color_manual(
  values = c(
    "Low ADI, susceptible" = "black",
    "High ADI, susceptible" = "grey",
    "Low ADI, non-susceptible" = "black",
    "High ADI, non-susceptible" = "grey"
  )
)
plt_linetype <- scale_linetype_manual(
  values = c(
    "Low ADI, susceptible" = "solid",
    "High ADI, susceptible" = "solid",
    "Low ADI, non-susceptible" = "dotted",
    "High ADI, non-susceptible" = "dotted"
  )
)
```

# Mortality analysis
## MDR

```{r}
# 1st isolate only
df_mdr_1st <- df2 |>
  select(-c(isolate_id, parent_hospital, department_name, organism_name, antibiotic_class, resistant_to_class)) |>
  distinct() |>
  drop_na() |>
  group_by(pat_deid) |>
  slice_min(isolate_number) |>
  slice(1) |> # Remove 8 duplicates, different locations for same isolate
  ungroup()
# All isolates included
df_mdr_all <- df2 |>
  select(-c(parent_hospital, department_name, organism_name, antibiotic_class, resistant_to_class)) |>
  distinct() |>
  drop_na() |>
  group_by(pat_deid, isolate_number) |>
  slice(1) |> # Remove 8 duplicates, different locations for same isolate
  ungroup()
```

#### Frequencies

```{r results='asis'}
df_mdr_all |>
  tabyl(mdr, statusf) |>
  adorn_totals(c("row", "col")) |>
  adorn_percentages() |>
  adorn_pct_formatting() |>
  adorn_ns() |>
  adorn_title() |> 
  kable("html", caption = "Mortality by susceptibility") |>
  kable_styling()

df_mdr_all |>
  tabyl(mdr, statusf, adi_tertile) |>
  adorn_totals(c("row", "col")) |>
  adorn_percentages() |>
  adorn_pct_formatting() |>
  adorn_ns() |>
  adorn_title() |>
  (\(x) walk2(names(x), x, ~ print(kable(.y, caption = paste("Mortality by susceptibility and ADI level:", .x)))))()
```

#### Model results

```{r}
# Fit propensity score model for resistance
# Not enough variability for repeated measures and no difference using 1st isolate vs all
# Removed age because it is colinear with culture_year
df_mdr_all <- calculate_iptw(
  data = df_mdr_all,
  formula = formula1,
  outcome_var = outcome_var1
)
# Evaluate weights
# summary(df_mdr_all$iptw)
# ggplot(df_mdr_all, aes(x = ps, fill = mdr)) +
#   geom_density(alpha = 0.5) +
#   theme_minimal() +
#   scale_fill_brewer(palette = "Set1")
```

```{r}
cox_mdr <- coxph(Surv(ftime, status) ~ adi_tertile,
                      weights = iptw,
                      cluster = pat_deid,
                 data = df_mdr_all |> filter(mdr))
cox.zph(cox_mdr)

model_results <- summary(cox_mdr)
model_results

estimates_nonsusc <- data.frame(
  drug_classs = "mdr",
  status = "nonsusceptible",
  hr = model_results$coefficients[2,2],
  lcl = model_results$conf.int[2,3],
  ucl = model_results$conf.int[2,4]
)

cox_nonmdr <- coxph(Surv(ftime, status) ~ adi_tertile,
                     weights = iptw,
                     cluster = pat_deid,
                 data = df_mdr_all |> filter(!mdr))
cox.zph(cox_nonmdr)

model_results <- summary(cox_nonmdr)
model_results

estimates_susc <- data.frame(
  drug_classs = "mdr",
  status = "susceptible",
  hr = model_results$coefficients[2,2],
  lcl = model_results$conf.int[2,3],
  ucl = model_results$conf.int[2,4]
)

estimates_hr <- rbind(estimates_nonsusc, estimates_susc)
rm(cox_mdr, cox_nonmdr)
```

```{r}
glm_mdr <- glm(status ~ adi_tertile,
               family = gaussian(link = "identity"),
               weights = iptw,
               data = df_mdr_all |> filter(mdr))

risk_diff <- coef(summary(glm_mdr))["adi_tertileHigh", "Estimate"]
se_risk_diff <- coef(summary(glm_mdr))["adi_tertileHigh", "Std. Error"]
lcl <- round(risk_diff - 1.96 * se_risk_diff,3) * 100
ucl <- round(risk_diff + 1.96 * se_risk_diff,3) * 100

estimates_nonsusc <- data.frame(
  drug_classs = "mdr",
  status = "nonsusceptible",
  rd = round(risk_diff,3) * 100,
  lcl = lcl,
  ucl = ucl
)

glm_mdr <- glm(status ~ adi_tertile,
               family = gaussian(link = "identity"),
               weights = iptw,
               data = df_mdr_all |> filter(!mdr))

risk_diff <- coef(summary(glm_mdr))["adi_tertileHigh", "Estimate"]
se_risk_diff <- coef(summary(glm_mdr))["adi_tertileHigh", "Std. Error"]
lcl <- round(risk_diff - 1.96 * se_risk_diff,3) * 100
ucl <- round(risk_diff + 1.96 * se_risk_diff,3) * 100

estimates_susc <- data.frame(
  drug_classs = "mdr",
  status = "susceptible",
  rd = round(risk_diff,3) * 100,
  lcl = lcl,
  ucl = ucl
)

estimates_rd <- rbind(estimates_nonsusc, estimates_susc)
rm(glm_mdr)
```

#### Cumulative incidence curves

```{r}
df_surv <- generate_survival_data(
  data = df_mdr_all,
  time_var = "ftime",
  status_var = "status",
  adi_var = "adi_tertile",
  group_var = "mdr",
  weights_var = "iptw",
  cluster_var = "pat_deid"
)
```

```{r}
chart_mdr <- ggplot(df_surv, aes(x = time, y = surv, color = group, linetype = group)) +
  plt_color +
  plt_linetype +
  plt_theme +
  plt_guides +
  geom_smooth(se = FALSE, method = "loess", span = 1) +
  labs(x = "Days", y = "Cumulative Incidence") +
  scale_x_continuous(limits = c(0, 30), breaks = seq(0, 30, 5)) +
  scale_y_continuous(limits = c(0, 0.35), breaks = seq(0, 0.35, 0.05))
chart_mdr
# ggsave(filename = "plots/fig_mdr.tiff", plot = chart_mdr, device="tiff", dpi=500, width = 6, height = 5)
```

## Antibiotic classes
### Aminoglycosides

```{r}
df_amino <- df2 |>
  filter(antibiotic_class == "aminoglycoside") |>
  select(-c(parent_hospital, department_name, organism_name, t0, tf, antibiotic_class, mdr)) |>
  distinct() |>
  drop_na()
```

#### Frequencies

```{r results='asis'}
df_amino |>
  tabyl(resistant_to_class, statusf) |>
  adorn_totals(c("row", "col")) |>
  adorn_percentages() |>
  adorn_pct_formatting() |>
  adorn_ns() |>
  adorn_title() |> 
  kable("html", caption = "Mortality by susceptibility") |>
  kable_styling()

df_amino |>
  tabyl(resistant_to_class, statusf, adi_tertile) |>
  adorn_totals(c("row", "col")) |>
  adorn_percentages() |>
  adorn_pct_formatting() |>
  adorn_ns() |>
  adorn_title() |>
  (\(x) walk2(names(x), x, ~ print(kable(.y, caption = paste("Mortality by susceptibility and ADI level:", .x)))))()
```

#### Model results

```{r}
# Fit propensity score model for resistance
df_amino <- calculate_iptw(
  data = df_amino,
  formula = formula1,
  outcome_var = outcome_var1
)
# Evaluate weights
# summary(df_amino$iptw)
# ggplot(df_amino, aes(x = ps, fill = resistant_to_class)) +
#   geom_density(alpha = 0.5) +
#   theme_minimal() +
#   scale_fill_brewer(palette = "Set1")
```

```{r}
cox_amino_nonsusc <- coxph(Surv(ftime, status) ~ adi_tertile,
                 weights = iptw,
                 cluster = pat_deid,
                 data = df_amino |> filter(resistant_to_class))
cox.zph(cox_amino_nonsusc)

model_results <- summary(cox_amino_nonsusc)
model_results

estimates_nonsusc <- data.frame(
  drug_classs = "aminoglycoside",
  status = "nonsusceptible",
  hr = model_results$coefficients[2,2],
  lcl = model_results$conf.int[2,3],
  ucl = model_results$conf.int[2,4]
)

cox_amino_susc <- coxph(Surv(ftime, status) ~ adi_tertile,
                 weights = iptw,
                 data = df_amino |> filter(!resistant_to_class))
cox.zph(cox_amino_susc)

model_results <- summary(cox_amino_susc)
model_results

estimates_susc <- data.frame(
  drug_classs = "aminoglycoside",
  status = "susceptible",
  hr = model_results$coefficients[2,2],
  lcl = model_results$conf.int[2,3],
  ucl = model_results$conf.int[2,4]
)

estimates_hr <- rbind(estimates_hr, estimates_nonsusc, estimates_susc)

rm(cox_amino_nonsusc, cox_amino_susc)
```

```{r}
glm_amino <- glm(status ~ adi_tertile,
               family = gaussian(link = "identity"),
               weights = iptw,
               data = df_amino |> filter(resistant_to_class))

risk_diff <- coef(summary(glm_amino))["adi_tertileHigh", "Estimate"]
se_risk_diff <- coef(summary(glm_amino))["adi_tertileHigh", "Std. Error"]
lcl <- round(risk_diff - 1.96 * se_risk_diff,3) * 100
ucl <- round(risk_diff + 1.96 * se_risk_diff,3) * 100

estimates_nonsusc <- data.frame(
  drug_classs = "aminoglycoside",
  status = "nonsusceptible",
  rd = round(risk_diff,3) * 100,
  lcl = lcl,
  ucl = ucl
)

glm_amino <- glm(status ~ adi_tertile,
               family = gaussian(link = "identity"),
               weights = iptw,
               data = df_amino |> filter(!resistant_to_class))

risk_diff <- coef(summary(glm_amino))["adi_tertileHigh", "Estimate"]
se_risk_diff <- coef(summary(glm_amino))["adi_tertileHigh", "Std. Error"]
lcl <- round(risk_diff - 1.96 * se_risk_diff,3) * 100
ucl <- round(risk_diff + 1.96 * se_risk_diff,3) * 100

estimates_susc <- data.frame(
  drug_classs = "aminoglycoside",
  status = "susceptible",
  rd = round(risk_diff,3) * 100,
  lcl = lcl,
  ucl = ucl
)

estimates_rd <- rbind(estimates_rd, estimates_nonsusc, estimates_susc)
rm(glm_amino)
```

#### Cumulative incidence curves

```{r}
df_surv <- generate_survival_data(
  data = df_amino,
  time_var = "ftime",
  status_var = "status",
  adi_var = "adi_tertile",
  group_var = "resistant_to_class",
  weights_var = "iptw",
  cluster_var = "pat_deid"
)
```

```{r}
chart_amino <- ggplot(df_surv, aes(x = time, y = surv, color = group, linetype = group)) +
  plt_color +
  plt_linetype +
  plt_theme +
  plt_guides +
  geom_smooth(se = FALSE, method = "loess", span = 1) +
  labs(x = "Days", y = "Cumulative Incidence") +
  scale_x_continuous(limits = c(0, 30), breaks = seq(0, 30, 5)) +
  scale_y_continuous(limits = c(0, 0.35), breaks = seq(0, 0.35, 0.05))
chart_amino
# ggsave(filename = "plots/fig_amino.tiff", plot = chart_amino, device="tiff", dpi=500, width = 6, height = 5)
```

### Carbapenems

```{r}
df_carba <- df2 |>
  filter(antibiotic_class == "carbapenem") |>
  select(-c(isolate_id, parent_hospital, department_name, organism_name, t0, tf, antibiotic_class, mdr)) |>
  distinct() |>
  drop_na()
```

#### Frequencies

```{r results='asis'}
df_carba |>
  tabyl(resistant_to_class, statusf) |>
  adorn_totals(c("row", "col")) |>
  adorn_percentages() |>
  adorn_pct_formatting() |>
  adorn_ns() |>
  adorn_title() |> 
  kable("html", caption = "Mortality by susceptibility") |>
  kable_styling()

df_carba |>
  tabyl(resistant_to_class, statusf, adi_tertile) |>
  adorn_totals(c("row", "col")) |>
  adorn_percentages() |>
  adorn_pct_formatting() |>
  adorn_ns() |>
  adorn_title() |>
  (\(x) walk2(names(x), x, ~ print(kable(.y, caption = paste("Mortality by susceptibility and ADI level:", .x)))))()
```

#### Model results

```{r}
# Fit propensity score model for resistance
df_carba <- calculate_iptw(
  data = df_carba,
  formula = formula1,
  outcome_var = outcome_var1
)
# Evaluate weights
# summary(df_carba$iptw)
# ggplot(df_carba, aes(x = ps, fill = resistant_to_class)) +
#   geom_density(alpha = 0.5) +
#   theme_minimal() +
#   scale_fill_brewer(palette = "Set1")
```

```{r}
cox_carb_nonsusc <- coxph(Surv(ftime, status) ~ adi_tertile,
                 weights = iptw,
                 cluster = pat_deid,
                 data = df_carba |> filter(resistant_to_class))
cox.zph(cox_carb_nonsusc)

model_results <- summary(cox_carb_nonsusc)
model_results

estimates_nonsusc <- data.frame(
  drug_classs = "carbapenem",
  status = "nonsusceptible",
  hr = model_results$coefficients[2,2],
  lcl = model_results$conf.int[2,3],
  ucl = model_results$conf.int[2,4]
)

cox_carb_susc <- coxph(Surv(ftime, status) ~ adi_tertile,
                 weights = iptw,
                 data = df_carba |> filter(!resistant_to_class))
cox.zph(cox_carb_susc)

model_results <- summary(cox_carb_susc)
model_results

estimates_susc <- data.frame(
  drug_classs = "carbapenem",
  status = "susceptible",
  hr = model_results$coefficients[2,2],
  lcl = model_results$conf.int[2,3],
  ucl = model_results$conf.int[2,4]
)

estimates_hr <- rbind(estimates_hr, estimates_nonsusc, estimates_susc)

rm(cox_carb_nonsusc, cox_carb_susc)
```

```{r}
glm_carba <- glm(status ~ adi_tertile,
               family = gaussian(link = "identity"),
               weights = iptw,
               data = df_carba |> filter(resistant_to_class))

risk_diff <- coef(summary(glm_carba))["adi_tertileHigh", "Estimate"]
se_risk_diff <- coef(summary(glm_carba))["adi_tertileHigh", "Std. Error"]
lcl <- round(risk_diff - 1.96 * se_risk_diff,3) * 100
ucl <- round(risk_diff + 1.96 * se_risk_diff,3) * 100

estimates_nonsusc <- data.frame(
  drug_classs = "carbapenem",
  status = "nonsusceptible",
  rd = round(risk_diff,3) * 100,
  lcl = lcl,
  ucl = ucl
)

glm_carba <- glm(status ~ adi_tertile,
               family = gaussian(link = "identity"),
               weights = iptw,
               data = df_carba |> filter(!resistant_to_class))

risk_diff <- coef(summary(glm_carba))["adi_tertileHigh", "Estimate"]
se_risk_diff <- coef(summary(glm_carba))["adi_tertileHigh", "Std. Error"]
lcl <- round(risk_diff - 1.96 * se_risk_diff,3) * 100
ucl <- round(risk_diff + 1.96 * se_risk_diff,3) * 100

estimates_susc <- data.frame(
  drug_classs = "carbapenem",
  status = "susceptible",
  rd = round(risk_diff,3) * 100,
  lcl = lcl,
  ucl = ucl
)

estimates_rd <- rbind(estimates_rd, estimates_nonsusc, estimates_susc)
rm(glm_carba)
```

#### Cumulative incidence curves

```{r}
df_surv <- generate_survival_data(
  data = df_carba,
  time_var = "ftime",
  status_var = "status",
  adi_var = "adi_tertile",
  group_var = "resistant_to_class",
  weights_var = "iptw",
  cluster_var = "pat_deid"
)
```

```{r}
chart_carba <- ggplot(df_surv, aes(x = time, y = surv, color = group, linetype = group)) +
  plt_color +
  plt_linetype +
  plt_theme +
  plt_guides +
  geom_smooth(se = FALSE, method = "loess", span = 1) +
  labs(x = "Days", y = "Cumulative Incidence") +
  scale_x_continuous(limits = c(0, 30), breaks = seq(0, 30, 5)) +
  scale_y_continuous(limits = c(0, 0.35), breaks = seq(0, 0.35, 0.05))
chart_carba
# ggsave(filename = "plots/fig_carba.tiff", plot = chart_carba, device="tiff", dpi=500, width = 6, height = 5)
```

### 3rd/4th generation cephalosporins

```{r}
df_ceph <- df2 |>
  filter(antibiotic_class == "cephalosporin") |>
  select(-c(parent_hospital, department_name, organism_name, t0, tf, antibiotic_class, mdr)) |>
  distinct() |>
  drop_na()
n_distinct(df_ceph$pat_deid)
```

#### Frequencies

```{r results='asis'}
df_ceph |>
  tabyl(resistant_to_class, statusf) |>
  adorn_totals(c("row", "col")) |>
  adorn_percentages() |>
  adorn_pct_formatting() |>
  adorn_ns() |>
  adorn_title() |> 
  kable("html", caption = "Mortality by susceptibility") |>
  kable_styling()

df_ceph |>
  tabyl(resistant_to_class, statusf, adi_tertile) |>
  adorn_totals(c("row", "col")) |>
  adorn_percentages() |>
  adorn_pct_formatting() |>
  adorn_ns() |>
  adorn_title() |>
  (\(x) walk2(names(x), x, ~ print(kable(.y, caption = paste("Mortality by susceptibility and ADI level:", .x)))))()
```

#### Model results

```{r}
# Fit propensity score model for resistance
df_ceph <- calculate_iptw(
  data = df_ceph,
  formula = formula1,
  outcome_var = outcome_var1
)
# Evaluate weights
# summary(df_ceph$iptw)
# ggplot(df_ceph, aes(x = ps, fill = resistant_to_class)) +
#   geom_density(alpha = 0.5) +
#   theme_minimal() +
#   scale_fill_brewer(palette = "Set1")
```

```{r}
cox_ceph_nonsusc <- coxph(Surv(ftime, status) ~ adi_tertile,
                 weights = iptw,
                 cluster = pat_deid,
                 data = df_ceph |> filter(resistant_to_class))
cox.zph(cox_ceph_nonsusc)

model_results <- summary(cox_ceph_nonsusc)
model_results

estimates_nonsusc <- data.frame(
  drug_classs = "cephalosporin",
  status = "nonsusceptible",
  hr = model_results$coefficients[2,2],
  lcl = model_results$conf.int[2,3],
  ucl = model_results$conf.int[2,4]
)

cox_ceph_susc <- coxph(Surv(ftime, status) ~ adi_tertile,
                 weights = iptw,
                 data = df_ceph |> filter(!resistant_to_class))
cox.zph(cox_ceph_susc)

model_results <- summary(cox_ceph_susc)
model_results

estimates_susc <- data.frame(
  drug_classs = "cephalosporin",
  status = "susceptible",
  hr = model_results$coefficients[2,2],
  lcl = model_results$conf.int[2,3],
  ucl = model_results$conf.int[2,4]
)

estimates_hr <- rbind(estimates_hr, estimates_nonsusc, estimates_susc)

rm(cox_ceph_nonsusc, cox_ceph_susc)
```

```{r}
glm_ceph <- glm(status ~ adi_tertile,
               family = gaussian(link = "identity"),
               weights = iptw,
               data = df_ceph |> filter(resistant_to_class))

risk_diff <- coef(summary(glm_ceph))["adi_tertileHigh", "Estimate"]
se_risk_diff <- coef(summary(glm_ceph))["adi_tertileHigh", "Std. Error"]
lcl <- round(risk_diff - 1.96 * se_risk_diff,3) * 100
ucl <- round(risk_diff + 1.96 * se_risk_diff,3) * 100

estimates_nonsusc <- data.frame(
  drug_classs = "cephalosporin",
  status = "nonsusceptible",
  rd = round(risk_diff,3) * 100,
  lcl = lcl,
  ucl = ucl
)

glm_ceph <- glm(status ~ adi_tertile,
               family = gaussian(link = "identity"),
               weights = iptw,
               data = df_ceph |> filter(!resistant_to_class))

risk_diff <- coef(summary(glm_ceph))["adi_tertileHigh", "Estimate"]
se_risk_diff <- coef(summary(glm_ceph))["adi_tertileHigh", "Std. Error"]
lcl <- round(risk_diff - 1.96 * se_risk_diff,3) * 100
ucl <- round(risk_diff + 1.96 * se_risk_diff,3) * 100

estimates_susc <- data.frame(
  drug_classs = "cephalosporin",
  status = "susceptible",
  rd = round(risk_diff,3) * 100,
  lcl = lcl,
  ucl = ucl
)

estimates_rd <- rbind(estimates_rd, estimates_nonsusc, estimates_susc)
rm(glm_ceph)
```

#### Cumulative incidence curves

```{r}
df_surv <- generate_survival_data(
  data = df_ceph,
  time_var = "ftime",
  status_var = "status",
  adi_var = "adi_tertile",
  group_var = "resistant_to_class",
  weights_var = "iptw",
  cluster_var = "pat_deid"
)
```

```{r}
chart_ceph <- ggplot(df_surv, aes(x = time, y = surv, color = group, linetype = group)) +
  plt_color +
  plt_linetype +
  plt_theme +
  plt_guides +
  geom_smooth(se = FALSE, method = "loess", span = 1) +
  labs(x = "Days", y = "Cumulative Incidence") +
  scale_x_continuous(limits = c(0, 30), breaks = seq(0, 30, 5)) +
  scale_y_continuous(limits = c(0, 0.35), breaks = seq(0, 0.35, 0.05))
chart_ceph
# ggsave(filename = "plots/fig_ceph.tiff", plot = chart_ceph, device="tiff", dpi=500, width = 6, height = 5)
```

### Penicillin + Beta-lactamase inhibitor

```{r}
df_penbli <- df2 |>
  filter(antibiotic_class == "penicillins_bli") |>
  select(-c(isolate_id, parent_hospital, department_name, organism_name, t0, tf, antibiotic_class, mdr)) |>
  distinct() |>
  drop_na()
```

#### Frequencies

```{r results='asis'}
df_penbli |>
  tabyl(resistant_to_class, statusf) |>
  adorn_totals(c("row", "col")) |>
  adorn_percentages() |>
  adorn_pct_formatting() |>
  adorn_ns() |>
  adorn_title() |> 
  kable("html", caption = "Mortality by susceptibility") |>
  kable_styling()

df_penbli |>
  tabyl(resistant_to_class, statusf, adi_tertile) |>
  adorn_totals(c("row", "col")) |>
  adorn_percentages() |>
  adorn_pct_formatting() |>
  adorn_ns() |>
  adorn_title() |>
  (\(x) walk2(names(x), x, ~ print(kable(.y, caption = paste("Mortality by susceptibility and ADI level:", .x)))))()
```

#### Model results

```{r}
# Fit propensity score model for resistance
df_penbli <- calculate_iptw(
  data = df_penbli,
  formula = formula1,
  outcome_var = outcome_var1
)
# Evaluate weights
# summary(df_penbli$iptw)
# ggplot(df_penbli, aes(x = ps, fill = resistant_to_class)) +
#   geom_density(alpha = 0.5) +
#   theme_minimal() +
#   scale_fill_brewer(palette = "Set1")
```

```{r}
cox_penbli_nonsusc <- coxph(Surv(ftime, status) ~ adi_tertile,
                 weights = iptw,
                 cluster = pat_deid,
                 data = df_penbli |> filter(resistant_to_class))
cox.zph(cox_penbli_nonsusc)

model_results <- summary(cox_penbli_nonsusc)
model_results

estimates_nonsusc <- data.frame(
  drug_classs = "penicillin_bli",
  status = "nonsusceptible",
  hr = model_results$coefficients[2,2],
  lcl = model_results$conf.int[2,3],
  ucl = model_results$conf.int[2,4]
)

cox_penbli_susc <- coxph(Surv(ftime, status) ~ adi_tertile,
                 weights = iptw,
                 data = df_penbli |> filter(!resistant_to_class))
cox.zph(cox_penbli_susc)

model_results <- summary(cox_penbli_susc)
model_results

estimates_susc <- data.frame(
  drug_classs = "penicillin_bli",
  status = "susceptible",
  hr = model_results$coefficients[2,2],
  lcl = model_results$conf.int[2,3],
  ucl = model_results$conf.int[2,4]
)

estimates_hr <- rbind(estimates_hr, estimates_nonsusc, estimates_susc)

rm(cox_penbli_nonsusc, cox_penbli_susc)
```

```{r}
glm_penbli <- glm(status ~ adi_tertile,
               family = gaussian(link = "identity"),
               weights = iptw,
               data = df_penbli |> filter(resistant_to_class))

risk_diff <- coef(summary(glm_penbli))["adi_tertileHigh", "Estimate"]
se_risk_diff <- coef(summary(glm_penbli))["adi_tertileHigh", "Std. Error"]
lcl <- round(risk_diff - 1.96 * se_risk_diff,3) * 100
ucl <- round(risk_diff + 1.96 * se_risk_diff,3) * 100

estimates_nonsusc <- data.frame(
  drug_classs = "penicillin_bli",
  status = "nonsusceptible",
  rd = round(risk_diff,3) * 100,
  lcl = lcl,
  ucl = ucl
)

glm_penbli <- glm(status ~ adi_tertile,
               family = gaussian(link = "identity"),
               weights = iptw,
               data = df_penbli |> filter(!resistant_to_class))

risk_diff <- coef(summary(glm_penbli))["adi_tertileHigh", "Estimate"]
se_risk_diff <- coef(summary(glm_penbli))["adi_tertileHigh", "Std. Error"]
lcl <- round(risk_diff - 1.96 * se_risk_diff,3) * 100
ucl <- round(risk_diff + 1.96 * se_risk_diff,3) * 100

estimates_susc <- data.frame(
  drug_classs = "penicillin_bli",
  status = "susceptible",
  rd = round(risk_diff,3) * 100,
  lcl = lcl,
  ucl = ucl
)

estimates_rd <- rbind(estimates_rd, estimates_nonsusc, estimates_susc)
rm(glm_penbli)
```

#### Cumulative incidence curves

```{r}
df_surv <- generate_survival_data(
  data = df_penbli,
  time_var = "ftime",
  status_var = "status",
  adi_var = "adi_tertile",
  group_var = "resistant_to_class",
  weights_var = "iptw",
  cluster_var = "pat_deid"
)
```

```{r}
chart_pen_bli <- ggplot(df_surv, aes(x = time, y = surv, color = group, linetype = group)) +
  plt_color +
  plt_linetype +
  plt_theme +
  plt_guides +
  geom_smooth(se = FALSE, method = "loess", span = 1) +
  labs(x = "Days", y = "Cumulative Incidence") +
  scale_x_continuous(limits = c(0, 30), breaks = seq(0, 30, 5)) +
  scale_y_continuous(limits = c(0, 0.35), breaks = seq(0, 0.35, 0.05))
chart_pen_bli
# ggsave(filename = "plots/fig_penbli.tiff", plot = chart_pen_bli, device="tiff", dpi=500, width = 6, height = 5)
```

### Quinolones

```{r}
df_quin <- df2 |>
  filter(antibiotic_class == "quinolone") |>
  select(-c(parent_hospital, department_name, organism_name, t0, tf, antibiotic_class, mdr)) |>
  distinct() |>
  drop_na()
```

#### Frequencies

```{r results='asis'}
df_quin |>
  tabyl(resistant_to_class, statusf) |>
  adorn_totals(c("row", "col")) |>
  adorn_percentages() |>
  adorn_pct_formatting() |>
  adorn_ns() |>
  adorn_title() |> 
  kable("html", caption = "Mortality by susceptibility") |>
  kable_styling()

df_quin |>
  tabyl(resistant_to_class, statusf, adi_tertile) |>
  adorn_totals(c("row", "col")) |>
  adorn_percentages() |>
  adorn_pct_formatting() |>
  adorn_ns() |>
  adorn_title() |>
  (\(x) walk2(names(x), x, ~ print(kable(.y, caption = paste("Mortality by susceptibility and ADI level:", .x)))))()
```

#### Model results

```{r}
# Fit propensity score model for resistance
df_quin <- calculate_iptw(
  data = df_quin,
  formula = formula1,
  outcome_var = outcome_var1
)
# Evaluate weights
# summary(df_quin$iptw)
# ggplot(df_quin, aes(x = ps, fill = resistant_to_class)) +
#   geom_density(alpha = 0.5) +
#   theme_minimal() +
#   scale_fill_brewer(palette = "Set1")
```

```{r}
cox_quin_nonsusc <- coxph(Surv(ftime, status) ~ adi_tertile,
                 weights = iptw,
                 cluster = pat_deid,
                 data = df_quin |> filter(resistant_to_class))
cox.zph(cox_quin_nonsusc)

model_results <- summary(cox_quin_nonsusc)
model_results

estimates_nonsusc <- data.frame(
  drug_classs = "quinolone",
  status = "nonsusceptible",
  hr = model_results$coefficients[2,2],
  lcl = model_results$conf.int[2,3],
  ucl = model_results$conf.int[2,4]
)

cox_quin_susc <- coxph(Surv(ftime, status) ~ adi_tertile,
                 weights = iptw,
                 data = df_quin |> filter(!resistant_to_class))
cox.zph(cox_quin_susc)

model_results <- summary(cox_quin_susc)
model_results

estimates_susc <- data.frame(
  drug_classs = "quinolone",
  status = "susceptible",
  hr = model_results$coefficients[2,2],
  lcl = model_results$conf.int[2,3],
  ucl = model_results$conf.int[2,4]
)

estimates_hr <- rbind(estimates_hr, estimates_nonsusc, estimates_susc)

rm(cox_quin_nonsusc, cox_quin_susc)
```

```{r}
glm_quin <- glm(status ~ adi_tertile,
               family = gaussian(link = "identity"),
               weights = iptw,
               data = df_quin |> filter(resistant_to_class))

risk_diff <- coef(summary(glm_quin))["adi_tertileHigh", "Estimate"]
se_risk_diff <- coef(summary(glm_quin))["adi_tertileHigh", "Std. Error"]
lcl <- round(risk_diff - 1.96 * se_risk_diff,3) * 100
ucl <- round(risk_diff + 1.96 * se_risk_diff,3) * 100

estimates_nonsusc <- data.frame(
  drug_classs = "quinolone",
  status = "nonsusceptible",
  rd = round(risk_diff,3) * 100,
  lcl = lcl,
  ucl = ucl
)

glm_quin <- glm(status ~ adi_tertile,
               family = gaussian(link = "identity"),
               weights = iptw,
               data = df_quin |> filter(!resistant_to_class))

risk_diff <- coef(summary(glm_quin))["adi_tertileHigh", "Estimate"]
se_risk_diff <- coef(summary(glm_quin))["adi_tertileHigh", "Std. Error"]
lcl <- round(risk_diff - 1.96 * se_risk_diff,3) * 100
ucl <- round(risk_diff + 1.96 * se_risk_diff,3) * 100

estimates_susc <- data.frame(
  drug_classs = "quinolone",
  status = "susceptible",
  rd = round(risk_diff,3) * 100,
  lcl = lcl,
  ucl = ucl
)

estimates_rd <- rbind(estimates_rd, estimates_nonsusc, estimates_susc)
rm(glm_quin)
```

#### Cumulative incidence curves

```{r}
df_surv <- generate_survival_data(
  data = df_quin,
  time_var = "ftime",
  status_var = "status",
  adi_var = "adi_tertile",
  group_var = "resistant_to_class",
  weights_var = "iptw",
  cluster_var = "pat_deid"
)
```

```{r}
chart_quin <- ggplot(df_surv, aes(x = time, y = surv, color = group, linetype = group)) +
  plt_color +
  plt_linetype +
  plt_theme +
  plt_guides +
  geom_smooth(se = FALSE, method = "loess", span = 1) +
  labs(x = "Days", y = "Cumulative Incidence") +
  scale_x_continuous(limits = c(0, 30), breaks = seq(0, 30, 5)) +
  scale_y_continuous(limits = c(0, 0.35), breaks = seq(0, 0.35, 0.05))
chart_quin
# ggsave(filename = "plots/fig_quin.tiff", plot = chart_quin, device="tiff", dpi=500, width = 6, height = 5)
```

# Forest plot
## Hazard ratios
**30-day mortality, non-susceptible vs susceptible isolate**

```{r}
df_forest_plot_hr <- estimates_hr |>
  mutate(resistance = factor(drug_classs, levels = c("aminoglycoside", "carbapenem", "cephalosporin", "penicillin_bli", "quinolone", "mdr"), labels = c("Aminoglycoside", "Carbapenem", "Cephalosporin, 3rd/4th generation", "Penicillin + beta-lactamase inhibitor", "Quinolone", "Multidrug resistance")),
         status = factor(status, levels = c("susceptible", "nonsusceptible"), labels = c("Susceptible", "Non-susceptible")),
         hr = round(hr, 2),
         lcl = round(lcl, 2),
         ucl = round(ucl, 2)) |>
  select(resistance, status, hr, lcl, ucl)

chart_forest <- ggplot(df_forest_plot_hr, aes(y = resistance, x = hr, xmin = lcl, xmax = ucl, color = status)) +
  ggstance::geom_pointrangeh(position = position_dodge(width = 0.6)) +
  geom_vline(xintercept = 1, linetype = "dashed") +
  labs(
    x = "Hazard Ratio",
    y = ""
  ) +
  plt_theme +
  scale_color_manual(values = c("Susceptible" = "black", "Non-susceptible" = "grey")) +
  scale_y_discrete(limits = rev) +
  scale_x_log10()
chart_forest
# ggsave(filename = "plots/fig_forest_plot.tiff", plot = chart_forest, device="tiff", dpi=500, width = 7, height = 5)
```

```{r}
df_forest_plot_hr |> 
  kable("html", caption = "Hazard ratios") |>
  kable_styling()
```

## Risk differences
**30-day mortality, non-susceptible vs susceptible isolate (per 100 isolates)**

```{r}
df_forest_plot_rd <- estimates_rd |>
  mutate(resistance = factor(drug_classs, levels = c("aminoglycoside", "carbapenem", "cephalosporin", "penicillin_bli", "quinolone", "mdr"), labels = c("Aminoglycoside", "Carbapenem", "Cephalosporin, 3rd/4th generation", "Penicillin + beta-lactamase inhibitor", "Quinolone", "Multidrug resistance")),
         status = factor(status, levels = c("susceptible", "nonsusceptible"), labels = c("Susceptible", "Non-susceptible"))) |>
  select(resistance, status, rd, lcl, ucl)

chart_forest <- ggplot(df_forest_plot_rd, aes(y = resistance, x = rd, xmin = lcl, xmax = ucl, color = status)) +
  ggstance::geom_pointrangeh(position = position_dodge(width = 0.6)) +
  geom_vline(xintercept = 0, linetype = "dashed") +
  labs(
    x = "Risk difference",
    y = ""
  ) +
  plt_theme +
  scale_color_manual(values = c("Susceptible" = "black", "Non-susceptible" = "grey")) +
  scale_y_discrete(limits = rev)
chart_forest
# ggsave(filename = "plots/fig_forest_plot.tiff", plot = chart_forest, device="tiff", dpi=500, width = 7, height = 5)
```

```{r}
df_forest_plot_rd |> 
  kable("html", caption = "Risk difference, per 100 isolates") |>
  kable_styling()
```



