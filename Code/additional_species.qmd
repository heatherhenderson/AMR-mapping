---
title: "Newly added species"
author: "Heather Henderson"
date: "`r format(Sys.time(), '%B %d, %Y')`"
format: html
self-contained: true
toc: true
toc-depth: 2
editor: visual
---

```{r setup, include=FALSE}
library(knitr)
opts_chunk$set(warning = FALSE, message = FALSE, error = FALSE, eval = TRUE, tidy = TRUE, cache = FALSE)
```

```{r libraries}
packages <- function(x){
  for(i in x){
     if(!require(i, character.only = TRUE)){
      install.packages(i, dependencies = TRUE)
       library(i, character.only = TRUE)
    }
  }
}
packages(c("readr", "readxl", "haven", "tidyverse" , "data.table" , "naniar", "rockchalk", "lubridate", "kableExtra", "DT", "formatR", "zoo", "binom", "plotly", "janitor", "sjlabelled", "Hmisc", "rms", "aod", "sandwich", "lmtest", "tableone", "broom", "gmodels", "arsenal", "investr", "RColorBrewer", "lessR"))
```

# **Raw data files**

```{r raw data files}
options(scipen=999)
setwd("C:/Users/henderh/Desktop/amr_proj/")
# Read in raw data
isolates <- fread("//ad.unc.edu/med/tracs/Groups/Research/CDWH/Van Duin_David_IRB23-2326/NewSpeciesCultures_April_2014_Aug31_2023.csv")
patient_demographics <- fread("//ad.unc.edu/med/tracs/Groups/Research/CDWH/Van Duin_David_IRB23-2326/NewSpeciesPatientDemographics.csv")
antibiotic_names <- read_excel("//ad.unc.edu/med/tracs/Groups/Research/CDWH/Van Duin_David_IRB23-2326/lookup_tables/antibiotic_names.xlsx")
antibiotic_classes <- read_excel("//ad.unc.edu/med/tracs/Groups/Research/CDWH/Van Duin_David_IRB23-2326/lookup_tables/breakpoints.xlsx")
organism_names <- read_excel("//ad.unc.edu/med/tracs/Groups/Research/CDWH/Van Duin_David_IRB23-2326/lookup_tables/organism_names.xlsx")
intrinsic_resistance <- read_excel("//ad.unc.edu/med/tracs/Groups/Research/CDWH/Van Duin_David_IRB23-2326/lookup_tables/intrinsic_resistance.xlsx")
zip_county <- read_excel("J:/ID/AMR_map_van_Duin/nc_zip_county.xlsx", col_types = c("text", "text", "text"))
```

# **Data cleaning**

## **Demographics**

```{r}
demo <- patient_demographics |>
  clean_names() |>
  mutate_if(is.character, tolower) |>
  mutate(original_file_mrn = str_pad(original_file_mrn, 12, "left", "0"),
         birth_date = as.Date(birth_date),
         death_date_epic = as.Date(death_date_epic),
         death_date_state = as.Date(death_date_state),
         race_recode = case_when(race == "white" ~ race,
                               race == "black/african american" ~ "black",
                               TRUE ~ "other/unknown"),
         ethnicity_recode = case_when(ethnicity == "not hispanic, latino/a, or spanish origin" ~ "nonhispanic",
                                      ethnicity %in% c("", "unknown", "prefer not to answer") ~ "unknown",
                                      TRUE ~ "hispanic"),
         female = ifelse(gender == "female", TRUE, FALSE),
         # Accept state death data as default
         death_date = death_date_state, 
         # Fill missing with Epic death date if available
         death_date = ifelse(is.na(death_date_state), death_date_epic, death_date), 
         # Correct dates for 2 patients
         death_date = ifelse(pat_deid == "afd6441b37f5a05e0c73e258124f74eb", NA, death_date), 
         death_date = as.Date(ifelse(pat_deid == "3d4f3ccecceace0476866a4391db1cab", death_date_epic, death_date)),
         zip_code = substr(zip, 1, 5)) |>
  select(original_file_mrn, pat_deid, birth_date, female, race, race_recode, ethnicity, ethnicity_recode, death_date, zip_code)
```

## **Isolates**

```{r}
df <- isolates |>
  clean_names() |>
  mutate_if(is.character, tolower) |>
  arrange(pat_deid) |>
  mutate(original_file_mrn = str_pad(original_file_mrn, 12, "left", "0"),
         order_date = as.Date(order_time),
         result_date = as.Date(result_time),
         culture_year = year(result_date)) |>
  select(-c(original_file_mrn, original_file_demrnid, pat_demrnid, order_proc_deid, birth_date, organism_group_name, genus, species, abnormal_yn, hide_antibiotic_yn, sensitivity_status, order_time, result_time))

n_distinct(df$pat_deid)
n_distinct(df$encounter_deid)
# 82,026 patients
# 124,175 encounters
```

#### **Join lookup tables**

```{r}
df1 <- df |>
  dplyr::rename(antibiotic_old = antibiotic) |> 
  left_join(antibiotic_names) |>
  # Standardize antibiotic names
  left_join(antibiotic_classes |> select(antibiotic_name, antibiotic_class), by = c("antibiotic" = "antibiotic_name")) |>
  mutate(antibiotic_old = str_replace(antibiotic_old, " mic|screening plate|other|screen", ""),
         antibiotic_old = str_squish(antibiotic_old),
         organism_name = str_replace(organism_name, "-", " "),
         organism_name = str_replace(organism_name, "suceptible", "susceptible"),
         organism_name = str_replace_all(organism_name, "_|,|presumptive|probable|smooth|rough|mucoid|carbapenem|by|id |screen|mdr|coagulase|negative|previously|pan|pcr|thymine|dependent| species| genus", ""),
         organism_name = str_remove(organism_name, "thymidine|ssp.*"),
         organism_name = str_squish(organism_name))

species <- df1 |>
  select(organism_name) |>
  distinct()
```

```{r}
df2 <- df1 |>
  left_join(intrinsic_resistance |> mutate(intrinsic_resistance = TRUE)) |> 
  # Remove entries in antibiotic_old that are not antibiotics (e.g. maldi, esbl), classes with only 1 observation, intrinsically resistant organism-drug pairs, results for 1st gen cephalosporins
  filter(!is.na(antibiotic) & !susceptibility %in% c("indeterminate", "no interpretation", "test performed", "test not performed", "bacterial identification performed", "not applicable") & !antibiotic_class %in% c("fosfomycin", "glycopeptide", "lipopeptide", "oxazolidinone") & is.na(intrinsic_resistance),
         antibiotic_class != "cephalosporin_1st_gen", 
         !is.na(organism_name)) |> 
  # Define nonsusceptible
  mutate(nonsusceptible = ifelse(susceptibility %in% c("susceptible", "susceptible-dose dependent"), FALSE, TRUE)) |> 
  select(-c(encounter_deid, antibiotic_old, susceptibility, intrinsic_resistance))  |>
  # Create unique isolate ID
  unite(isolate_id, pat_deid, organism_name, result_date, remove = FALSE) 
```

### **Recode specimen source, select isolates from blood -\> respiratory -\> urine -\> other**

```{r}
# Get specimen types corresponding to respiratory and other
src_resp <- df2 |>
  select(specimen_type) |>
  filter((str_detect(specimen_type, pattern = "bronch|phar|sput|trach"))) |>
  unique()

src_other <- df2 |>
  select(specimen_type) |>
  filter(!specimen_type %in% src_resp$specimen_type,
         !specimen_type %in% c("blood", "urine")) |>
  unique()

df3 <- demo |> 
  select(-c(race, ethnicity)) |>
  inner_join(df2) |>
  mutate(age = floor(as.numeric(result_date - birth_date) / 365.25),
         isolate_source = case_when(specimen_type == "blood" ~ specimen_type,
                                    specimen_type == "urine" ~ "urine",
                                    specimen_type %in% src_resp$specimen_type ~ "resp",
                                    specimen_type %in% src_other$specimen_type ~ "other"),
         isolate_source = factor(isolate_source, levels = c("urine", "blood", "resp", "other"))) |>
  select(-c(specimen_source, specimen_type))|>
  group_by(pat_deid, organism_name) |>
  # Select first isolate of given species per patient
  slice_min(result_date) |> 
  ungroup() |>
  # Create hierarchy for specimen source
  mutate(source_order = match(isolate_source,  c("blood", "resp", "urine", "other"))) |> 
  group_by(isolate_id) |>
  filter(source_order == min(source_order)) |>
  ungroup() |>
  select(-c(order_date, source_order)) |>
  relocate(age, .before = 4) |>
  distinct()

rm(src_resp, src_other)
```

### **Staphylococcus aureus**

```{r}
df_staph <- df3 |>
  filter(str_detect(organism_name, "aureus"),
         antibiotic == "oxacillin") |>
  mutate(organism_name = str_remove(organism_name, " group"),
         organism_name2 = str_replace_all(organism_name, "methicillin |oxacillin |resistant |susceptible ", ""),
         organism_name2 = case_when(str_detect(organism_name, "aureus") & nonsusceptible ~ "mrsa",
                                    str_detect(organism_name, "aureus") & !nonsusceptible ~ "mssa",
                                    TRUE ~ organism_name)) |>
  select(-c(antibiotic, antibiotic_class, nonsusceptible, department_name)) |>
  distinct()

df_staph |> 
  tabyl(organism_name2) |>
  adorn_totals("row") |>
  adorn_pct_formatting() |>
  kable("html", caption = "Staph oxacillin results") |>
  kable_styling()

# write_rds(df_staph, "//ad.unc.edu/med/tracs/Groups/Research/CDWH/Van Duin_David_IRB23-2326/staph_aureus.rds")
```

