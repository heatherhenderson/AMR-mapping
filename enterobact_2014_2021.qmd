---
title: "Enterobacterales isolates 2014-2021"
format: html
self-contained: true
date: "2022-09-13"
---

```{r setup, include=FALSE}
library(knitr)
opts_chunk$set(warning = FALSE, message = FALSE, error = FALSE, eval = TRUE, tidy = TRUE, cache = FALSE)
```

```{r libraries}
packages <- function(x){
  for(i in x){
     if(!require(i, character.only = TRUE)){
      install.packages(i, dependencies = TRUE)
       library(i, character.only = TRUE)
    }
  }
}
packages(c("haven", "readxl", "tidyverse" , "data.table" , "naniar", "rockchalk", "lubridate", "kableExtra", "DT", "formatR", "zoo", "binom", "plotly", "janitor", "sjlabelled", "Hmisc", "rms", "aod", "sandwich", "lmtest", "tableone", "broom", "investr"))
```

```{r}
options(scipen=999)
setwd("C:/Users/henderh/Desktop/amr_proj")
cultures_2019_2021 <- read_delim("Z:/Enterobacterales_HIV_data/Susceptibilities_HIVStatus_2019_2021/Cultures_and_Susceptibilities_June_2019_June_29_2021.csv", delim = "|", escape_double = FALSE, trim_ws = TRUE)
demographics_new <- read_excel("Z:/Enterobacterales_HIV_data/Susceptibilities_HIVStatus_2019_2021/Patients_Summary_Susceptibilties_HIV.xlsx")
demographics_old <- read_excel("Z:/Enterobacterales_HIV_data/Procedures_meds_up_to_2018/original_files/VAN_DUIN_IRB18-3438_PATIENT_DEMOGRAPHICS.xlsx")
antibiotic_names <- read_excel("antibiotic_names.xlsx")
antibiotic_classes <- read_excel("breakpoints.xlsx")
organism_names <- read_excel("organism_names.xlsx")
intrinsic_resistance <- read_excel("intrinsic_resistance.xlsx")
full_data_old <- readRDS("Z:/culture_data_clean_2000_2021.rds")
```

```{r}
# Demographics for 2019-21 data
demo_new <- demographics_new |>
  clean_names() |>
  mutate_if(is.character, tolower) |>
  mutate(birth_date = as.Date(birth_date),
         race1 = ifelse(race1 %in% c("other", "other race", "other/hispanic", "prefer not to answer", "unknown", "0"), race2, race1),
         race_recode = case_when(race1 %in% c("white or caucasian") ~ "white",
                                 race1 %in% c("black or african american") ~ "black",
                                 race1 %in% c("american indian or alaska native", "native american", "hawaiian / other pac", "native hawaiian or other pacific islander") ~ "native american or pacific islander",
                                 race1 %in% c("asian") ~ "asian",
                                 race1 %in% c("other race", "prefer not to answer", "unknown", NA) ~ "unknown"),
         ethnicity_recode = ifelse(ethnicity == "hispanic or latino", "hispanic", "non-hispanic")) |>
  dplyr::rename(patient_race = race1) |>
  select(pat_mrn_id, birth_date, gender, patient_race, race_recode, ethnicity, ethnicity_recode, zip)
# Demographics for 2014-18 data
demo_old <- demographics_old |>
  clean_names() |>
  mutate_if(is.character, tolower) |>
  select(current_mrn, dob, death_date, sex, patient_race, ethnic_group, zip) |>
  dplyr::rename(pat_mrn_id = current_mrn,
         ethnicity = ethnic_group) |>
  mutate(birth_date = as.Date(dob),
         death_date = as.Date(death_date),
         race_recode = case_when(patient_race %in% c("white or caucasian", "caucasian") ~ "white",
                                 patient_race %in% c("black or african american", "african american") ~ "black",
                                 patient_race %in% c("native american", "american indian or alaska native", "hawaiian / other pac", "native hawaiian or other pacific islander") ~ "native american or pacific islander",
                                 patient_race %in% c("asian") ~ "asian",
                                 patient_race %in% c("other", "other race", "other/hispanic", "patient refused", "unknown", NA) ~ "other/unknown"),
         ethnicity_recode = ifelse(ethnicity != "hispanic or latino" | is.na(ethnicity), "non-hispanic", "hispanic"),
         gender = case_when(sex == "f" ~ "female",
                            sex == "m" ~ "male",
                            TRUE ~ "unknown")) |>
  select(-c(sex, dob))
# Combined demographics dataset
demo_all <- demo_new |>
  full_join(demo_old) |>
  add_count(pat_mrn_id) |>
  # If duplicate, keep record with race
  filter(!(n == 2 & is.na(patient_race))) |> 
  # If duplicate, keep record with death date
  filter(!(n == 2 & is.na(death_date))) |> 
  # Extract first 5 digits in zip code
  mutate(zip_code = substr(zip, 1, 5)) |> 
  distinct() |>
  select(-c(zip, n))
# 105,564 patients
```

```{r}
df <- cultures_2019_2021 |>
  clean_names() |>
  mutate_if(is.character, tolower) |>
  filter(result_date < as.Date("2021-07-01")) |>
  # Create unique isolate ID
  unite(isolate_id, pat_mrn_id, organism_name, result_date, remove = FALSE) |> 
  select(pat_mrn_id, isolate_id, department_name, specimen_source, specimen_type, organism_name, result_date, antibiotic, susceptibility) |>
  distinct()
```

```{r}
# Classify specimen source
urinary <- df |>
  select(isolate_id, specimen_type, specimen_source) |>
  distinct() |>
  filter_all(.vars_predicate = any_vars(str_detect(., pattern = "urine")))

resp <- df |>
  select(isolate_id, specimen_type, specimen_source) |>
  distinct() |>
  filter_all(.vars_predicate = any_vars(str_detect(., pattern = "trach|sput|resp|bronc|bal|lung")))

df1 <- df |>
  left_join(urinary |> mutate(urine = TRUE)) |>
  left_join(resp |> mutate(resp = TRUE)) |>
  mutate(isolate_source = case_when(specimen_type == "blood" ~ "blood",
                                    urine ~ "urine",
                                    resp ~ "resp",
                                    TRUE ~ "other")) |>
  # Create hierarchy for specimen source
  mutate(source_order = match(isolate_source,  c("blood", "resp", "urine", "other"))) |> 
  group_by(isolate_id) |>
  filter(source_order == min(source_order)) |>
  select(-c(source_order, urine, resp))
```

```{r}
# Standardize organism and antibiotic names
antibiotics <- antibiotic_classes |> 
  dplyr::rename(antibiotic = antibiotic_name) |>
  select(antibiotic, antibiotic_class) |>
  left_join(antibiotic_names)

# Remove intrinsically resistant organism/antibiotic results
# Classify nonsusceptible and source type
df2 <- df1 |>
  dplyr::rename(organism_name_old = organism_name,
         antibiotic_old = antibiotic) |>
  left_join(organism_names) |>
  left_join(antibiotics) |>
  left_join(intrinsic_resistance |> mutate(int_resistant = TRUE)) |>
  filter(is.na(int_resistant), 
         antibiotic != "na",
         susceptibility %in% c("susceptible", "resistant", "intermediate")) |>
  mutate(nonsusceptible = if_else(susceptibility == "susceptible", FALSE, TRUE),
         culture_year = year(result_date)) |>
  group_by(pat_mrn_id, organism_name) |>
  # Select first isolate of given species per patient
  slice_min(result_date) |> 
  ungroup() |>
  select(pat_mrn_id, isolate_id, result_date, culture_year, specimen_source, specimen_type, isolate_source, organism_name, genus, antibiotic, antibiotic_class, susceptibility, nonsusceptible)
```

```{r}
df3 <- df2 |>
  select(pat_mrn_id, isolate_id, culture_year, organism_name, genus, antibiotic_class, nonsusceptible) |>
  distinct() |>
  # Set antibiotic nonsusceptibility = class resistance
  mutate(resistant_to_class = nonsusceptible) |>  
  # Get number of classes tested
  add_count(pat_mrn_id, organism_name, antibiotic_class) |> 
  # Get number of results per class tested
  add_count(pat_mrn_id, organism_name, antibiotic_class, resistant_to_class) |> 
  # Change to resistant to antibiotic class = FALSE to TRUE if discordant
  mutate(resistant_to_class = ifelse(n != nn, TRUE, resistant_to_class)) |> 
  select(isolate_id, culture_year, antibiotic_class, resistant_to_class) |>
  distinct() |>
  group_by(isolate_id) |>
  # Define MDR
  mutate(mdr = ifelse(sum(resistant_to_class) > 2, TRUE, FALSE)) |> 
  ungroup() |>
  left_join(df2)
```

```{r}
# 2014-2018 data
# Recode cefepime
cultures_old <- full_data_old |>
  select(-c(race2, specimen_source_factor, race_factor, resistant_to_class, mdr)) |>
  filter(culture_date > as.Date("2014-01-01")) |>
  filter(culture_date < as.Date("2019-01-01"),
         !is.na(nonsusceptible)) |>
  dplyr::rename(birth_date = dob,
         patient_race = race1,
         result_date = culture_date,
         isolate_source = specimen_source_recode) |>
  mutate(culture_year = year(result_date),
         antibiotic_class = ifelse(antibiotic == "cefepime", "cephalosporin_4th_gen", class),
         # Set antibiotic nonsusceptibility = class resistance
         resistant_to_class = nonsusceptible) |>  
  # Get number of classes tested
  add_count(pat_mrn_id, organism_name, antibiotic_class) |> 
  # Get number of results per class tested
  add_count(pat_mrn_id, organism_name, antibiotic_class, resistant_to_class) |> 
  # Change to resistant to antibiotic class = FALSE to TRUE if discordant
  mutate(resistant_to_class = ifelse(n != nn, TRUE, resistant_to_class)) |> 
  left_join(demo_all |> select(pat_mrn_id, death_date)) |>
  select(-c(n,nn))

cultures_old1 <- cultures_old |>
  select(isolate_id, antibiotic_class, resistant_to_class) |>
  distinct() |>
  group_by(isolate_id) |>
  # Define MDR
  mutate(mdr = ifelse(sum(resistant_to_class) > 2, TRUE, FALSE)) |> 
  ungroup() |>
  # Rejoin full data
  full_join(cultures_old) |> 
  select(pat_mrn_id, isolate_id, birth_date, death_date, gender, race_recode, patient_race, ethnicity, result_date, culture_year, specimen_source, specimen_type, isolate_source, organism_name, genus, antibiotic, antibiotic_class, susceptibility, nonsusceptible, resistant_to_class, mdr)

n_distinct(cultures_old1$pat_mrn_id)
n_distinct(cultures_old1$isolate_id)
```

```{r}
df4 <- df3 |>
  left_join(demo_all) |>
  mutate(gender = ifelse(!gender %in% c("male", "female"), "unknown", gender),
         race_recode = ifelse(race_recode %in% c("other/unknown", NA), "unknown", race_recode),
         ethnicity_recode = ifelse(ethnicity != "hispanic or latino" | is.na(ethnicity), "non-hispanic", "hispanic")) |>
  select(pat_mrn_id, isolate_id, birth_date, death_date, gender, race_recode, patient_race, ethnicity, result_date, culture_year, specimen_source, specimen_type, isolate_source, organism_name, genus, antibiotic, antibiotic_class, susceptibility, nonsusceptible, resistant_to_class, mdr)
# Combine new and old data
df5 <- df4 |>
  bind_rows(cultures_old1)
# Remove observations with same species isolated previously
df6 <- df5 |>
  select(pat_mrn_id, result_date, organism_name) |>
  distinct() |>
  group_by(pat_mrn_id, organism_name) |>
  slice(which.min(result_date)) |>
  ungroup() |>
  left_join(df5)

n_distinct(df6$pat_mrn_id)
n_distinct(df6$isolate_id)
# 81,093 patients, 96,656 isolates
# write_rds(df6, "Z:/culture_data_clean_2014_2021.rds")
```

```{r}
# Frequencies
df6 |>
  select(isolate_id, culture_year, mdr) |>
  distinct() |>
  tabyl(culture_year, mdr) |>
  adorn_percentages() |>
  adorn_pct_formatting()
# 19% MDR

df6 |>
  select(isolate_id, antibiotic_class, resistant_to_class) |>
  distinct() |>
  tabyl(antibiotic_class, resistant_to_class) |>
  adorn_percentages() |>
  adorn_pct_formatting() |>
  adorn_ns()

df6 |>
  group_by(antibiotic_class, isolate_source, resistant_to_class) |>
  summarise(n = n()) |>
  mutate(total = sum(n),
         pct = n / total * 100) |>
  filter(resistant_to_class) |>
  ungroup() |> 
  filter(antibiotic_class %in% c("aminoglycoside", "cephalosporin_3rd_gen", "cephalosporin_2nd_gen", "nitrofuran", "penicillins", "penicillins_bli", "polypeptide", "sulfonamide", "quinolone") & isolate_source != "other") |> 
  select(-c(n, total, resistant_to_class))  |> 
  spread(isolate_source, pct)
```









